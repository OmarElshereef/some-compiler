Terminals unused in grammar

   CONTINUE
   DOUBLE
   COMMENT


Grammar

    0 $accept: program $end

    1 program: program statement
    2        | /* empty */

    3 statement: declaration ';'
    4          | initialization ';'
    5          | assignment ';'
    6          | unary_expression ';'

    7 $@1: /* empty */

    8 statement: $@1 if_statement

    9 $@2: /* empty */

   10 statement: $@2 switch_statement

   11 $@3: /* empty */

   12 statement: $@3 do_loop ';'

   13 $@4: /* empty */

   14 statement: $@4 while_loop

   15 $@5: /* empty */

   16 statement: $@5 for_loop
   17          | function_definition
   18          | function_call ';'
   19          | return_statement ';'
   20          | ID ';'

   21 $@6: /* empty */

   22 statement: $@6 '{' program '}'

   23 do_loop: DO '{' program '}' WHILE '(' expression ')'

   24 for_loop: FOR '(' for_loop_initialization ';' for_loop_condition ';' for_loop_increment ')' '{' program '}'

   25 for_loop_initialization: INT ID ASSIGN INT_CONST
   26                        | ID ASSIGN INT_CONST
   27                        | /* empty */

   28 for_loop_condition: expression
   29                   | /* empty */

   30 for_loop_increment: expression
   31                   | assignment
   32                   | /* empty */

   33 while_loop: WHILE '(' expression ')' '{' program '}'

   34 $@7: /* empty */

   35 function_definition: function_declaration_prototype $@7 '{' program '}'

   36 function_declaration_prototype: VOID ID '(' function_parameters_optional ')'
   37                               | type ID '(' function_parameters_optional ')'

   38 function_parameters_optional: function_parameters
   39                             | /* empty */

   40 function_parameters: function_parameters ',' function_parameter
   41                    | function_parameter

   42 function_parameter: type ID

   43 return_statement: RETURN expression
   44                 | RETURN assignment
   45                 | RETURN

   46 function_call: ID '(' function_arguments_optional ')'
   47              | assignment '(' function_arguments_optional ')'
   48              | initialization '(' function_arguments_optional ')'

   49 function_arguments_optional: function_arguments
   50                            | /* empty */

   51 function_arguments: function_arguments ',' function_argument
   52                   | function_argument

   53 function_argument: literal

   54 if_statement: IF '(' expression ')' '{' program '}'
   55             | IF '(' expression ')' '{' program '}' ELSE '{' program '}'

   56 switch_statement: SWITCH '(' ID ')' '{' switch_program '}'

   57 switch_program: case_statements
   58               | case_statements default_statement
   59               | default_statement

   60 case_statements: case_statements case_statement
   61                | case_statement

   62 case_statement: CASE literal ':' program BREAK ';'

   63 default_statement: DEFAULT ':' program BREAK ';'

   64 initialization: CONST type ID ASSIGN expression
   65               | type ID ASSIGN expression

   66 declaration: CONST type ID
   67            | type ID

   68 assignment: ID assign expression

   69 assign: ASSIGN
   70       | ADD_ASSIGN
   71       | SUB_ASSIGN
   72       | MUL_ASSIGN
   73       | DIV_ASSIGN
   74       | MOD_ASSIGN

   75 type: INT
   76     | FLOAT
   77     | CHAR
   78     | STRING
   79     | BOOL

   80 evaluate_expression: evaluate_expression BIT_AND evaluate_expression
   81                    | evaluate_expression BIT_OR evaluate_expression
   82                    | evaluate_expression BIT_XOR evaluate_expression
   83                    | evaluate_expression PLUS evaluate_expression
   84                    | evaluate_expression MINUS evaluate_expression
   85                    | evaluate_expression MUL evaluate_expression
   86                    | evaluate_expression DIV evaluate_expression
   87                    | evaluate_expression MOD evaluate_expression
   88                    | evaluate_expression INC
   89                    | evaluate_expression DEC
   90                    | '(' evaluate_expression ')'
   91                    | FLOAT_CONST
   92                    | INT_CONST
   93                    | CHAR_CONST
   94                    | ID
   95                    | TRUE
   96                    | FALSE

   97 math_or_value: evaluate_expression
   98              | STRING_CONST

   99 condition: expression OR expression
  100          | expression AND expression
  101          | NOT expression
  102          | math_or_value EQ math_or_value
  103          | math_or_value NEQ math_or_value
  104          | math_or_value LT math_or_value
  105          | math_or_value GT math_or_value
  106          | math_or_value LTE math_or_value
  107          | math_or_value GTE math_or_value
  108          | '(' condition ')'

  109 unary_expression: ID INC
  110                 | ID DEC

  111 expression: math_or_value
  112           | condition

  113 literal: ID
  114        | INT_CONST
  115        | FLOAT_CONST
  116        | CHAR_CONST
  117        | STRING_CONST
  118        | TRUE
  119        | FALSE


Terminals, with rules where they appear

$end (0) 0
'(' (40) 23 24 33 36 37 46 47 48 54 55 56 90 108
')' (41) 23 24 33 36 37 46 47 48 54 55 56 90 108
',' (44) 40 51
':' (58) 62 63
';' (59) 3 4 5 6 12 18 19 20 24 62 63
'{' (123) 22 23 24 33 35 54 55 56
'}' (125) 22 23 24 33 35 54 55 56
error (256)
IF (258) 54 55
ELSE (259) 55
WHILE (260) 23 33
FOR (261) 24
DO (262) 23
SWITCH (263) 56
CASE (264) 62
DEFAULT (265) 63
BREAK (266) 62 63
CONTINUE (267)
RETURN (268) 43 44 45
CONST (269) 64 66
INT (270) 25 75
FLOAT (271) 76
DOUBLE (272)
CHAR (273) 77
STRING (274) 78
BOOL (275) 79
VOID (276) 36
TRUE (277) 95 118
FALSE (278) 96 119
PLUS (279) 83
MINUS (280) 84
MUL (281) 85
DIV (282) 86
MOD (283) 87
INC (284) 88 109
DEC (285) 89 110
ASSIGN (286) 25 26 64 65 69
ADD_ASSIGN (287) 70
SUB_ASSIGN (288) 71
MUL_ASSIGN (289) 72
DIV_ASSIGN (290) 73
MOD_ASSIGN (291) 74
EQ (292) 102
NEQ (293) 103
LT (294) 104
GT (295) 105
LTE (296) 106
GTE (297) 107
AND (298) 100
OR (299) 99
NOT (300) 101
BIT_AND (301) 80
BIT_OR (302) 81
BIT_XOR (303) 82
COMMENT (304)
FUNC (305)
ID (306) 20 25 26 36 37 42 46 56 64 65 66 67 68 94 109 110 113
INT_CONST (307) 25 26 92 114
FLOAT_CONST (308) 91 115
STRING_CONST (309) 98 117
CHAR_CONST (310) 93 116


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
program (64)
    on left: 1 2, on right: 0 1 22 23 24 33 35 54 55 62 63
statement (65)
    on left: 3 4 5 6 8 10 12 14 16 17 18 19 20 22, on right: 1
$@1 (66)
    on left: 7, on right: 8
$@2 (67)
    on left: 9, on right: 10
$@3 (68)
    on left: 11, on right: 12
$@4 (69)
    on left: 13, on right: 14
$@5 (70)
    on left: 15, on right: 16
$@6 (71)
    on left: 21, on right: 22
do_loop (72)
    on left: 23, on right: 12
for_loop (73)
    on left: 24, on right: 16
for_loop_initialization (74)
    on left: 25 26 27, on right: 24
for_loop_condition (75)
    on left: 28 29, on right: 24
for_loop_increment (76)
    on left: 30 31 32, on right: 24
while_loop (77)
    on left: 33, on right: 14
function_definition (78)
    on left: 35, on right: 17
$@7 (79)
    on left: 34, on right: 35
function_declaration_prototype (80)
    on left: 36 37, on right: 35
function_parameters_optional (81)
    on left: 38 39, on right: 36 37
function_parameters (82)
    on left: 40 41, on right: 38 40
function_parameter (83)
    on left: 42, on right: 40 41
return_statement (84)
    on left: 43 44 45, on right: 19
function_call (85)
    on left: 46 47 48, on right: 18
function_arguments_optional (86)
    on left: 49 50, on right: 46 47 48
function_arguments (87)
    on left: 51 52, on right: 49 51
function_argument (88)
    on left: 53, on right: 51 52
if_statement (89)
    on left: 54 55, on right: 8
switch_statement (90)
    on left: 56, on right: 10
switch_program (91)
    on left: 57 58 59, on right: 56
case_statements (92)
    on left: 60 61, on right: 57 58 60
case_statement (93)
    on left: 62, on right: 60 61
default_statement (94)
    on left: 63, on right: 58 59
initialization (95)
    on left: 64 65, on right: 4 48
declaration (96)
    on left: 66 67, on right: 3
assignment (97)
    on left: 68, on right: 5 31 44 47
assign (98)
    on left: 69 70 71 72 73 74, on right: 68
type (99)
    on left: 75 76 77 78 79, on right: 37 42 64 65 66 67
evaluate_expression (100)
    on left: 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96, on right:
    80 81 82 83 84 85 86 87 88 89 90 97
math_or_value (101)
    on left: 97 98, on right: 102 103 104 105 106 107 111
condition (102)
    on left: 99 100 101 102 103 104 105 106 107 108, on right: 108
    112
unary_expression (103)
    on left: 109 110, on right: 6
expression (104)
    on left: 111 112, on right: 23 28 30 33 43 54 55 64 65 68 99 100
    101
literal (105)
    on left: 113 114 115 116 117 118 119, on right: 53 62


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


state 1

    0 $accept: program . $end
    1 program: program . statement

    $end    shift, and go to state 2
    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 2

    0 $accept: program $end .

    $default  accept


state 3

   43 return_statement: RETURN . expression
   44                 | RETURN . assignment
   45                 | RETURN .

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 31
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    $default  reduce using rule 45 (return_statement)

    assignment           go to state 37
    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 41


state 4

   64 initialization: CONST . type ID ASSIGN expression
   66 declaration: CONST . type ID

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9

    type  go to state 42


state 5

   75 type: INT .

    $default  reduce using rule 75 (type)


state 6

   76 type: FLOAT .

    $default  reduce using rule 76 (type)


state 7

   77 type: CHAR .

    $default  reduce using rule 77 (type)


state 8

   78 type: STRING .

    $default  reduce using rule 78 (type)


state 9

   79 type: BOOL .

    $default  reduce using rule 79 (type)


state 10

   36 function_declaration_prototype: VOID . ID '(' function_parameters_optional ')'

    ID  shift, and go to state 43


state 11

   20 statement: ID . ';'
   46 function_call: ID . '(' function_arguments_optional ')'
   68 assignment: ID . assign expression
  109 unary_expression: ID . INC
  110                 | ID . DEC

    INC         shift, and go to state 44
    DEC         shift, and go to state 45
    ASSIGN      shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    MUL_ASSIGN  shift, and go to state 49
    DIV_ASSIGN  shift, and go to state 50
    MOD_ASSIGN  shift, and go to state 51
    ';'         shift, and go to state 52
    '('         shift, and go to state 53

    assign  go to state 54


state 12

    1 program: program statement .

    $default  reduce using rule 1 (program)


state 13

    8 statement: $@1 . if_statement

    IF  shift, and go to state 55

    if_statement  go to state 56


state 14

   10 statement: $@2 . switch_statement

    SWITCH  shift, and go to state 57

    switch_statement  go to state 58


state 15

   12 statement: $@3 . do_loop ';'

    DO  shift, and go to state 59

    do_loop  go to state 60


state 16

   14 statement: $@4 . while_loop

    WHILE  shift, and go to state 61

    while_loop  go to state 62


state 17

   16 statement: $@5 . for_loop

    FOR  shift, and go to state 63

    for_loop  go to state 64


state 18

   22 statement: $@6 . '{' program '}'

    '{'  shift, and go to state 65


state 19

   17 statement: function_definition .

    $default  reduce using rule 17 (statement)


state 20

   35 function_definition: function_declaration_prototype . $@7 '{' program '}'

    $default  reduce using rule 34 ($@7)

    $@7  go to state 66


state 21

   19 statement: return_statement . ';'

    ';'  shift, and go to state 67


state 22

   18 statement: function_call . ';'

    ';'  shift, and go to state 68


state 23

    4 statement: initialization . ';'
   48 function_call: initialization . '(' function_arguments_optional ')'

    ';'  shift, and go to state 69
    '('  shift, and go to state 70


state 24

    3 statement: declaration . ';'

    ';'  shift, and go to state 71


state 25

    5 statement: assignment . ';'
   47 function_call: assignment . '(' function_arguments_optional ')'

    ';'  shift, and go to state 72
    '('  shift, and go to state 73


state 26

   37 function_declaration_prototype: type . ID '(' function_parameters_optional ')'
   65 initialization: type . ID ASSIGN expression
   67 declaration: type . ID

    ID  shift, and go to state 74


state 27

    6 statement: unary_expression . ';'

    ';'  shift, and go to state 75


state 28

   95 evaluate_expression: TRUE .

    $default  reduce using rule 95 (evaluate_expression)


state 29

   96 evaluate_expression: FALSE .

    $default  reduce using rule 96 (evaluate_expression)


state 30

  101 condition: NOT . expression

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 77


state 31

   68 assignment: ID . assign expression
   94 evaluate_expression: ID .

    ASSIGN      shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    MUL_ASSIGN  shift, and go to state 49
    DIV_ASSIGN  shift, and go to state 50
    MOD_ASSIGN  shift, and go to state 51

    $default  reduce using rule 94 (evaluate_expression)

    assign  go to state 54


state 32

   92 evaluate_expression: INT_CONST .

    $default  reduce using rule 92 (evaluate_expression)


state 33

   91 evaluate_expression: FLOAT_CONST .

    $default  reduce using rule 91 (evaluate_expression)


state 34

   98 math_or_value: STRING_CONST .

    $default  reduce using rule 98 (math_or_value)


state 35

   93 evaluate_expression: CHAR_CONST .

    $default  reduce using rule 93 (evaluate_expression)


state 36

   90 evaluate_expression: '(' . evaluate_expression ')'
  108 condition: '(' . condition ')'

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 78
    math_or_value        go to state 39
    condition            go to state 79
    expression           go to state 80


state 37

   44 return_statement: RETURN assignment .

    $default  reduce using rule 44 (return_statement)


state 38

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC
   97 math_or_value: evaluate_expression .

    PLUS     shift, and go to state 81
    MINUS    shift, and go to state 82
    MUL      shift, and go to state 83
    DIV      shift, and go to state 84
    MOD      shift, and go to state 85
    INC      shift, and go to state 86
    DEC      shift, and go to state 87
    BIT_AND  shift, and go to state 88
    BIT_OR   shift, and go to state 89
    BIT_XOR  shift, and go to state 90

    $default  reduce using rule 97 (math_or_value)


state 39

  102 condition: math_or_value . EQ math_or_value
  103          | math_or_value . NEQ math_or_value
  104          | math_or_value . LT math_or_value
  105          | math_or_value . GT math_or_value
  106          | math_or_value . LTE math_or_value
  107          | math_or_value . GTE math_or_value
  111 expression: math_or_value .

    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    LT   shift, and go to state 93
    GT   shift, and go to state 94
    LTE  shift, and go to state 95
    GTE  shift, and go to state 96

    $default  reduce using rule 111 (expression)


state 40

  112 expression: condition .

    $default  reduce using rule 112 (expression)


state 41

   43 return_statement: RETURN expression .
   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98

    $default  reduce using rule 43 (return_statement)


state 42

   64 initialization: CONST type . ID ASSIGN expression
   66 declaration: CONST type . ID

    ID  shift, and go to state 99


state 43

   36 function_declaration_prototype: VOID ID . '(' function_parameters_optional ')'

    '('  shift, and go to state 100


state 44

  109 unary_expression: ID INC .

    $default  reduce using rule 109 (unary_expression)


state 45

  110 unary_expression: ID DEC .

    $default  reduce using rule 110 (unary_expression)


state 46

   69 assign: ASSIGN .

    $default  reduce using rule 69 (assign)


state 47

   70 assign: ADD_ASSIGN .

    $default  reduce using rule 70 (assign)


state 48

   71 assign: SUB_ASSIGN .

    $default  reduce using rule 71 (assign)


state 49

   72 assign: MUL_ASSIGN .

    $default  reduce using rule 72 (assign)


state 50

   73 assign: DIV_ASSIGN .

    $default  reduce using rule 73 (assign)


state 51

   74 assign: MOD_ASSIGN .

    $default  reduce using rule 74 (assign)


state 52

   20 statement: ID ';' .

    $default  reduce using rule 20 (statement)


state 53

   46 function_call: ID '(' . function_arguments_optional ')'

    TRUE          shift, and go to state 101
    FALSE         shift, and go to state 102
    ID            shift, and go to state 103
    INT_CONST     shift, and go to state 104
    FLOAT_CONST   shift, and go to state 105
    STRING_CONST  shift, and go to state 106
    CHAR_CONST    shift, and go to state 107

    $default  reduce using rule 50 (function_arguments_optional)

    function_arguments_optional  go to state 108
    function_arguments           go to state 109
    function_argument            go to state 110
    literal                      go to state 111


state 54

   68 assignment: ID assign . expression

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 112


state 55

   54 if_statement: IF . '(' expression ')' '{' program '}'
   55             | IF . '(' expression ')' '{' program '}' ELSE '{' program '}'

    '('  shift, and go to state 113


state 56

    8 statement: $@1 if_statement .

    $default  reduce using rule 8 (statement)


state 57

   56 switch_statement: SWITCH . '(' ID ')' '{' switch_program '}'

    '('  shift, and go to state 114


state 58

   10 statement: $@2 switch_statement .

    $default  reduce using rule 10 (statement)


state 59

   23 do_loop: DO . '{' program '}' WHILE '(' expression ')'

    '{'  shift, and go to state 115


state 60

   12 statement: $@3 do_loop . ';'

    ';'  shift, and go to state 116


state 61

   33 while_loop: WHILE . '(' expression ')' '{' program '}'

    '('  shift, and go to state 117


state 62

   14 statement: $@4 while_loop .

    $default  reduce using rule 14 (statement)


state 63

   24 for_loop: FOR . '(' for_loop_initialization ';' for_loop_condition ';' for_loop_increment ')' '{' program '}'

    '('  shift, and go to state 118


state 64

   16 statement: $@5 for_loop .

    $default  reduce using rule 16 (statement)


state 65

   22 statement: $@6 '{' . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 119


state 66

   35 function_definition: function_declaration_prototype $@7 . '{' program '}'

    '{'  shift, and go to state 120


state 67

   19 statement: return_statement ';' .

    $default  reduce using rule 19 (statement)


state 68

   18 statement: function_call ';' .

    $default  reduce using rule 18 (statement)


state 69

    4 statement: initialization ';' .

    $default  reduce using rule 4 (statement)


state 70

   48 function_call: initialization '(' . function_arguments_optional ')'

    TRUE          shift, and go to state 101
    FALSE         shift, and go to state 102
    ID            shift, and go to state 103
    INT_CONST     shift, and go to state 104
    FLOAT_CONST   shift, and go to state 105
    STRING_CONST  shift, and go to state 106
    CHAR_CONST    shift, and go to state 107

    $default  reduce using rule 50 (function_arguments_optional)

    function_arguments_optional  go to state 121
    function_arguments           go to state 109
    function_argument            go to state 110
    literal                      go to state 111


state 71

    3 statement: declaration ';' .

    $default  reduce using rule 3 (statement)


state 72

    5 statement: assignment ';' .

    $default  reduce using rule 5 (statement)


state 73

   47 function_call: assignment '(' . function_arguments_optional ')'

    TRUE          shift, and go to state 101
    FALSE         shift, and go to state 102
    ID            shift, and go to state 103
    INT_CONST     shift, and go to state 104
    FLOAT_CONST   shift, and go to state 105
    STRING_CONST  shift, and go to state 106
    CHAR_CONST    shift, and go to state 107

    $default  reduce using rule 50 (function_arguments_optional)

    function_arguments_optional  go to state 122
    function_arguments           go to state 109
    function_argument            go to state 110
    literal                      go to state 111


state 74

   37 function_declaration_prototype: type ID . '(' function_parameters_optional ')'
   65 initialization: type ID . ASSIGN expression
   67 declaration: type ID .

    ASSIGN  shift, and go to state 123
    '('     shift, and go to state 124

    $default  reduce using rule 67 (declaration)


state 75

    6 statement: unary_expression ';' .

    $default  reduce using rule 6 (statement)


state 76

   94 evaluate_expression: ID .

    $default  reduce using rule 94 (evaluate_expression)


state 77

   99 condition: expression . OR expression
  100          | expression . AND expression
  101          | NOT expression .

    $default  reduce using rule 101 (condition)


state 78

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC
   90                    | '(' evaluate_expression . ')'
   97 math_or_value: evaluate_expression .

    PLUS     shift, and go to state 81
    MINUS    shift, and go to state 82
    MUL      shift, and go to state 83
    DIV      shift, and go to state 84
    MOD      shift, and go to state 85
    INC      shift, and go to state 86
    DEC      shift, and go to state 87
    BIT_AND  shift, and go to state 88
    BIT_OR   shift, and go to state 89
    BIT_XOR  shift, and go to state 90
    ')'      shift, and go to state 125

    $default  reduce using rule 97 (math_or_value)


state 79

  108 condition: '(' condition . ')'
  112 expression: condition .

    ')'  shift, and go to state 126

    $default  reduce using rule 112 (expression)


state 80

   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98


state 81

   83 evaluate_expression: evaluate_expression PLUS . evaluate_expression

    TRUE         shift, and go to state 28
    FALSE        shift, and go to state 29
    ID           shift, and go to state 76
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33
    CHAR_CONST   shift, and go to state 35
    '('          shift, and go to state 127

    evaluate_expression  go to state 128


state 82

   84 evaluate_expression: evaluate_expression MINUS . evaluate_expression

    TRUE         shift, and go to state 28
    FALSE        shift, and go to state 29
    ID           shift, and go to state 76
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33
    CHAR_CONST   shift, and go to state 35
    '('          shift, and go to state 127

    evaluate_expression  go to state 129


state 83

   85 evaluate_expression: evaluate_expression MUL . evaluate_expression

    TRUE         shift, and go to state 28
    FALSE        shift, and go to state 29
    ID           shift, and go to state 76
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33
    CHAR_CONST   shift, and go to state 35
    '('          shift, and go to state 127

    evaluate_expression  go to state 130


state 84

   86 evaluate_expression: evaluate_expression DIV . evaluate_expression

    TRUE         shift, and go to state 28
    FALSE        shift, and go to state 29
    ID           shift, and go to state 76
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33
    CHAR_CONST   shift, and go to state 35
    '('          shift, and go to state 127

    evaluate_expression  go to state 131


state 85

   87 evaluate_expression: evaluate_expression MOD . evaluate_expression

    TRUE         shift, and go to state 28
    FALSE        shift, and go to state 29
    ID           shift, and go to state 76
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33
    CHAR_CONST   shift, and go to state 35
    '('          shift, and go to state 127

    evaluate_expression  go to state 132


state 86

   88 evaluate_expression: evaluate_expression INC .

    $default  reduce using rule 88 (evaluate_expression)


state 87

   89 evaluate_expression: evaluate_expression DEC .

    $default  reduce using rule 89 (evaluate_expression)


state 88

   80 evaluate_expression: evaluate_expression BIT_AND . evaluate_expression

    TRUE         shift, and go to state 28
    FALSE        shift, and go to state 29
    ID           shift, and go to state 76
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33
    CHAR_CONST   shift, and go to state 35
    '('          shift, and go to state 127

    evaluate_expression  go to state 133


state 89

   81 evaluate_expression: evaluate_expression BIT_OR . evaluate_expression

    TRUE         shift, and go to state 28
    FALSE        shift, and go to state 29
    ID           shift, and go to state 76
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33
    CHAR_CONST   shift, and go to state 35
    '('          shift, and go to state 127

    evaluate_expression  go to state 134


state 90

   82 evaluate_expression: evaluate_expression BIT_XOR . evaluate_expression

    TRUE         shift, and go to state 28
    FALSE        shift, and go to state 29
    ID           shift, and go to state 76
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33
    CHAR_CONST   shift, and go to state 35
    '('          shift, and go to state 127

    evaluate_expression  go to state 135


state 91

  102 condition: math_or_value EQ . math_or_value

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 127

    evaluate_expression  go to state 38
    math_or_value        go to state 136


state 92

  103 condition: math_or_value NEQ . math_or_value

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 127

    evaluate_expression  go to state 38
    math_or_value        go to state 137


state 93

  104 condition: math_or_value LT . math_or_value

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 127

    evaluate_expression  go to state 38
    math_or_value        go to state 138


state 94

  105 condition: math_or_value GT . math_or_value

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 127

    evaluate_expression  go to state 38
    math_or_value        go to state 139


state 95

  106 condition: math_or_value LTE . math_or_value

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 127

    evaluate_expression  go to state 38
    math_or_value        go to state 140


state 96

  107 condition: math_or_value GTE . math_or_value

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 127

    evaluate_expression  go to state 38
    math_or_value        go to state 141


state 97

  100 condition: expression AND . expression

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 142


state 98

   99 condition: expression OR . expression

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 143


state 99

   64 initialization: CONST type ID . ASSIGN expression
   66 declaration: CONST type ID .

    ASSIGN  shift, and go to state 144

    $default  reduce using rule 66 (declaration)


state 100

   36 function_declaration_prototype: VOID ID '(' . function_parameters_optional ')'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9

    $default  reduce using rule 39 (function_parameters_optional)

    function_parameters_optional  go to state 145
    function_parameters           go to state 146
    function_parameter            go to state 147
    type                          go to state 148


state 101

  118 literal: TRUE .

    $default  reduce using rule 118 (literal)


state 102

  119 literal: FALSE .

    $default  reduce using rule 119 (literal)


state 103

  113 literal: ID .

    $default  reduce using rule 113 (literal)


state 104

  114 literal: INT_CONST .

    $default  reduce using rule 114 (literal)


state 105

  115 literal: FLOAT_CONST .

    $default  reduce using rule 115 (literal)


state 106

  117 literal: STRING_CONST .

    $default  reduce using rule 117 (literal)


state 107

  116 literal: CHAR_CONST .

    $default  reduce using rule 116 (literal)


state 108

   46 function_call: ID '(' function_arguments_optional . ')'

    ')'  shift, and go to state 149


state 109

   49 function_arguments_optional: function_arguments .
   51 function_arguments: function_arguments . ',' function_argument

    ','  shift, and go to state 150

    $default  reduce using rule 49 (function_arguments_optional)


state 110

   52 function_arguments: function_argument .

    $default  reduce using rule 52 (function_arguments)


state 111

   53 function_argument: literal .

    $default  reduce using rule 53 (function_argument)


state 112

   68 assignment: ID assign expression .
   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98

    $default  reduce using rule 68 (assignment)


state 113

   54 if_statement: IF '(' . expression ')' '{' program '}'
   55             | IF '(' . expression ')' '{' program '}' ELSE '{' program '}'

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 151


state 114

   56 switch_statement: SWITCH '(' . ID ')' '{' switch_program '}'

    ID  shift, and go to state 152


state 115

   23 do_loop: DO '{' . program '}' WHILE '(' expression ')'

    $default  reduce using rule 2 (program)

    program  go to state 153


state 116

   12 statement: $@3 do_loop ';' .

    $default  reduce using rule 12 (statement)


state 117

   33 while_loop: WHILE '(' . expression ')' '{' program '}'

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 154


state 118

   24 for_loop: FOR '(' . for_loop_initialization ';' for_loop_condition ';' for_loop_increment ')' '{' program '}'

    INT  shift, and go to state 155
    ID   shift, and go to state 156

    $default  reduce using rule 27 (for_loop_initialization)

    for_loop_initialization  go to state 157


state 119

    1 program: program . statement
   22 statement: $@6 '{' program . '}'

    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11
    '}'     shift, and go to state 158

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 120

   35 function_definition: function_declaration_prototype $@7 '{' . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 159


state 121

   48 function_call: initialization '(' function_arguments_optional . ')'

    ')'  shift, and go to state 160


state 122

   47 function_call: assignment '(' function_arguments_optional . ')'

    ')'  shift, and go to state 161


state 123

   65 initialization: type ID ASSIGN . expression

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 162


state 124

   37 function_declaration_prototype: type ID '(' . function_parameters_optional ')'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9

    $default  reduce using rule 39 (function_parameters_optional)

    function_parameters_optional  go to state 163
    function_parameters           go to state 146
    function_parameter            go to state 147
    type                          go to state 148


state 125

   90 evaluate_expression: '(' evaluate_expression ')' .

    $default  reduce using rule 90 (evaluate_expression)


state 126

  108 condition: '(' condition ')' .

    $default  reduce using rule 108 (condition)


state 127

   90 evaluate_expression: '(' . evaluate_expression ')'

    TRUE         shift, and go to state 28
    FALSE        shift, and go to state 29
    ID           shift, and go to state 76
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33
    CHAR_CONST   shift, and go to state 35
    '('          shift, and go to state 127

    evaluate_expression  go to state 164


state 128

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   83                    | evaluate_expression PLUS evaluate_expression .
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC

    MUL  shift, and go to state 83
    DIV  shift, and go to state 84
    MOD  shift, and go to state 85
    INC  shift, and go to state 86
    DEC  shift, and go to state 87

    $default  reduce using rule 83 (evaluate_expression)


state 129

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   84                    | evaluate_expression MINUS evaluate_expression .
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC

    MUL  shift, and go to state 83
    DIV  shift, and go to state 84
    MOD  shift, and go to state 85
    INC  shift, and go to state 86
    DEC  shift, and go to state 87

    $default  reduce using rule 84 (evaluate_expression)


state 130

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   85                    | evaluate_expression MUL evaluate_expression .
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC

    INC  shift, and go to state 86
    DEC  shift, and go to state 87

    $default  reduce using rule 85 (evaluate_expression)


state 131

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   86                    | evaluate_expression DIV evaluate_expression .
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC

    INC  shift, and go to state 86
    DEC  shift, and go to state 87

    $default  reduce using rule 86 (evaluate_expression)


state 132

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   87                    | evaluate_expression MOD evaluate_expression .
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC

    INC  shift, and go to state 86
    DEC  shift, and go to state 87

    $default  reduce using rule 87 (evaluate_expression)


state 133

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   80                    | evaluate_expression BIT_AND evaluate_expression .
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82
    MUL    shift, and go to state 83
    DIV    shift, and go to state 84
    MOD    shift, and go to state 85
    INC    shift, and go to state 86
    DEC    shift, and go to state 87

    $default  reduce using rule 80 (evaluate_expression)


state 134

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   81                    | evaluate_expression BIT_OR evaluate_expression .
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC

    PLUS     shift, and go to state 81
    MINUS    shift, and go to state 82
    MUL      shift, and go to state 83
    DIV      shift, and go to state 84
    MOD      shift, and go to state 85
    INC      shift, and go to state 86
    DEC      shift, and go to state 87
    BIT_AND  shift, and go to state 88

    $default  reduce using rule 81 (evaluate_expression)


state 135

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   82                    | evaluate_expression BIT_XOR evaluate_expression .
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC

    PLUS     shift, and go to state 81
    MINUS    shift, and go to state 82
    MUL      shift, and go to state 83
    DIV      shift, and go to state 84
    MOD      shift, and go to state 85
    INC      shift, and go to state 86
    DEC      shift, and go to state 87
    BIT_AND  shift, and go to state 88
    BIT_OR   shift, and go to state 89

    $default  reduce using rule 82 (evaluate_expression)


state 136

  102 condition: math_or_value EQ math_or_value .

    $default  reduce using rule 102 (condition)


state 137

  103 condition: math_or_value NEQ math_or_value .

    $default  reduce using rule 103 (condition)


state 138

  104 condition: math_or_value LT math_or_value .

    $default  reduce using rule 104 (condition)


state 139

  105 condition: math_or_value GT math_or_value .

    $default  reduce using rule 105 (condition)


state 140

  106 condition: math_or_value LTE math_or_value .

    $default  reduce using rule 106 (condition)


state 141

  107 condition: math_or_value GTE math_or_value .

    $default  reduce using rule 107 (condition)


state 142

   99 condition: expression . OR expression
  100          | expression . AND expression
  100          | expression AND expression .

    $default  reduce using rule 100 (condition)


state 143

   99 condition: expression . OR expression
   99          | expression OR expression .
  100          | expression . AND expression

    AND  shift, and go to state 97

    $default  reduce using rule 99 (condition)


state 144

   64 initialization: CONST type ID ASSIGN . expression

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 165


state 145

   36 function_declaration_prototype: VOID ID '(' function_parameters_optional . ')'

    ')'  shift, and go to state 166


state 146

   38 function_parameters_optional: function_parameters .
   40 function_parameters: function_parameters . ',' function_parameter

    ','  shift, and go to state 167

    $default  reduce using rule 38 (function_parameters_optional)


state 147

   41 function_parameters: function_parameter .

    $default  reduce using rule 41 (function_parameters)


state 148

   42 function_parameter: type . ID

    ID  shift, and go to state 168


state 149

   46 function_call: ID '(' function_arguments_optional ')' .

    $default  reduce using rule 46 (function_call)


state 150

   51 function_arguments: function_arguments ',' . function_argument

    TRUE          shift, and go to state 101
    FALSE         shift, and go to state 102
    ID            shift, and go to state 103
    INT_CONST     shift, and go to state 104
    FLOAT_CONST   shift, and go to state 105
    STRING_CONST  shift, and go to state 106
    CHAR_CONST    shift, and go to state 107

    function_argument  go to state 169
    literal            go to state 111


state 151

   54 if_statement: IF '(' expression . ')' '{' program '}'
   55             | IF '(' expression . ')' '{' program '}' ELSE '{' program '}'
   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    ')'  shift, and go to state 170


state 152

   56 switch_statement: SWITCH '(' ID . ')' '{' switch_program '}'

    ')'  shift, and go to state 171


state 153

    1 program: program . statement
   23 do_loop: DO '{' program . '}' WHILE '(' expression ')'

    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11
    '}'     shift, and go to state 172

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 154

   33 while_loop: WHILE '(' expression . ')' '{' program '}'
   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    ')'  shift, and go to state 173


state 155

   25 for_loop_initialization: INT . ID ASSIGN INT_CONST

    ID  shift, and go to state 174


state 156

   26 for_loop_initialization: ID . ASSIGN INT_CONST

    ASSIGN  shift, and go to state 175


state 157

   24 for_loop: FOR '(' for_loop_initialization . ';' for_loop_condition ';' for_loop_increment ')' '{' program '}'

    ';'  shift, and go to state 176


state 158

   22 statement: $@6 '{' program '}' .

    $default  reduce using rule 22 (statement)


state 159

    1 program: program . statement
   35 function_definition: function_declaration_prototype $@7 '{' program . '}'

    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11
    '}'     shift, and go to state 177

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 160

   48 function_call: initialization '(' function_arguments_optional ')' .

    $default  reduce using rule 48 (function_call)


state 161

   47 function_call: assignment '(' function_arguments_optional ')' .

    $default  reduce using rule 47 (function_call)


state 162

   65 initialization: type ID ASSIGN expression .
   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98

    $default  reduce using rule 65 (initialization)


state 163

   37 function_declaration_prototype: type ID '(' function_parameters_optional . ')'

    ')'  shift, and go to state 178


state 164

   80 evaluate_expression: evaluate_expression . BIT_AND evaluate_expression
   81                    | evaluate_expression . BIT_OR evaluate_expression
   82                    | evaluate_expression . BIT_XOR evaluate_expression
   83                    | evaluate_expression . PLUS evaluate_expression
   84                    | evaluate_expression . MINUS evaluate_expression
   85                    | evaluate_expression . MUL evaluate_expression
   86                    | evaluate_expression . DIV evaluate_expression
   87                    | evaluate_expression . MOD evaluate_expression
   88                    | evaluate_expression . INC
   89                    | evaluate_expression . DEC
   90                    | '(' evaluate_expression . ')'

    PLUS     shift, and go to state 81
    MINUS    shift, and go to state 82
    MUL      shift, and go to state 83
    DIV      shift, and go to state 84
    MOD      shift, and go to state 85
    INC      shift, and go to state 86
    DEC      shift, and go to state 87
    BIT_AND  shift, and go to state 88
    BIT_OR   shift, and go to state 89
    BIT_XOR  shift, and go to state 90
    ')'      shift, and go to state 125


state 165

   64 initialization: CONST type ID ASSIGN expression .
   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98

    $default  reduce using rule 64 (initialization)


state 166

   36 function_declaration_prototype: VOID ID '(' function_parameters_optional ')' .

    $default  reduce using rule 36 (function_declaration_prototype)


state 167

   40 function_parameters: function_parameters ',' . function_parameter

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9

    function_parameter  go to state 179
    type                go to state 148


state 168

   42 function_parameter: type ID .

    $default  reduce using rule 42 (function_parameter)


state 169

   51 function_arguments: function_arguments ',' function_argument .

    $default  reduce using rule 51 (function_arguments)


state 170

   54 if_statement: IF '(' expression ')' . '{' program '}'
   55             | IF '(' expression ')' . '{' program '}' ELSE '{' program '}'

    '{'  shift, and go to state 180


state 171

   56 switch_statement: SWITCH '(' ID ')' . '{' switch_program '}'

    '{'  shift, and go to state 181


state 172

   23 do_loop: DO '{' program '}' . WHILE '(' expression ')'

    WHILE  shift, and go to state 182


state 173

   33 while_loop: WHILE '(' expression ')' . '{' program '}'

    '{'  shift, and go to state 183


state 174

   25 for_loop_initialization: INT ID . ASSIGN INT_CONST

    ASSIGN  shift, and go to state 184


state 175

   26 for_loop_initialization: ID ASSIGN . INT_CONST

    INT_CONST  shift, and go to state 185


state 176

   24 for_loop: FOR '(' for_loop_initialization ';' . for_loop_condition ';' for_loop_increment ')' '{' program '}'

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    $default  reduce using rule 29 (for_loop_condition)

    for_loop_condition   go to state 186
    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 187


state 177

   35 function_definition: function_declaration_prototype $@7 '{' program '}' .

    $default  reduce using rule 35 (function_definition)


state 178

   37 function_declaration_prototype: type ID '(' function_parameters_optional ')' .

    $default  reduce using rule 37 (function_declaration_prototype)


state 179

   40 function_parameters: function_parameters ',' function_parameter .

    $default  reduce using rule 40 (function_parameters)


state 180

   54 if_statement: IF '(' expression ')' '{' . program '}'
   55             | IF '(' expression ')' '{' . program '}' ELSE '{' program '}'

    $default  reduce using rule 2 (program)

    program  go to state 188


state 181

   56 switch_statement: SWITCH '(' ID ')' '{' . switch_program '}'

    CASE     shift, and go to state 189
    DEFAULT  shift, and go to state 190

    switch_program     go to state 191
    case_statements    go to state 192
    case_statement     go to state 193
    default_statement  go to state 194


state 182

   23 do_loop: DO '{' program '}' WHILE . '(' expression ')'

    '('  shift, and go to state 195


state 183

   33 while_loop: WHILE '(' expression ')' '{' . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 196


state 184

   25 for_loop_initialization: INT ID ASSIGN . INT_CONST

    INT_CONST  shift, and go to state 197


state 185

   26 for_loop_initialization: ID ASSIGN INT_CONST .

    $default  reduce using rule 26 (for_loop_initialization)


state 186

   24 for_loop: FOR '(' for_loop_initialization ';' for_loop_condition . ';' for_loop_increment ')' '{' program '}'

    ';'  shift, and go to state 198


state 187

   28 for_loop_condition: expression .
   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98

    $default  reduce using rule 28 (for_loop_condition)


state 188

    1 program: program . statement
   54 if_statement: IF '(' expression ')' '{' program . '}'
   55             | IF '(' expression ')' '{' program . '}' ELSE '{' program '}'

    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11
    '}'     shift, and go to state 199

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 189

   62 case_statement: CASE . literal ':' program BREAK ';'

    TRUE          shift, and go to state 101
    FALSE         shift, and go to state 102
    ID            shift, and go to state 103
    INT_CONST     shift, and go to state 104
    FLOAT_CONST   shift, and go to state 105
    STRING_CONST  shift, and go to state 106
    CHAR_CONST    shift, and go to state 107

    literal  go to state 200


state 190

   63 default_statement: DEFAULT . ':' program BREAK ';'

    ':'  shift, and go to state 201


state 191

   56 switch_statement: SWITCH '(' ID ')' '{' switch_program . '}'

    '}'  shift, and go to state 202


state 192

   57 switch_program: case_statements .
   58               | case_statements . default_statement
   60 case_statements: case_statements . case_statement

    CASE     shift, and go to state 189
    DEFAULT  shift, and go to state 190

    $default  reduce using rule 57 (switch_program)

    case_statement     go to state 203
    default_statement  go to state 204


state 193

   61 case_statements: case_statement .

    $default  reduce using rule 61 (case_statements)


state 194

   59 switch_program: default_statement .

    $default  reduce using rule 59 (switch_program)


state 195

   23 do_loop: DO '{' program '}' WHILE '(' . expression ')'

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 76
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 205


state 196

    1 program: program . statement
   33 while_loop: WHILE '(' expression ')' '{' program . '}'

    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11
    '}'     shift, and go to state 206

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 197

   25 for_loop_initialization: INT ID ASSIGN INT_CONST .

    $default  reduce using rule 25 (for_loop_initialization)


state 198

   24 for_loop: FOR '(' for_loop_initialization ';' for_loop_condition ';' . for_loop_increment ')' '{' program '}'

    TRUE          shift, and go to state 28
    FALSE         shift, and go to state 29
    NOT           shift, and go to state 30
    ID            shift, and go to state 31
    INT_CONST     shift, and go to state 32
    FLOAT_CONST   shift, and go to state 33
    STRING_CONST  shift, and go to state 34
    CHAR_CONST    shift, and go to state 35
    '('           shift, and go to state 36

    $default  reduce using rule 32 (for_loop_increment)

    for_loop_increment   go to state 207
    assignment           go to state 208
    evaluate_expression  go to state 38
    math_or_value        go to state 39
    condition            go to state 40
    expression           go to state 209


state 199

   54 if_statement: IF '(' expression ')' '{' program '}' .
   55             | IF '(' expression ')' '{' program '}' . ELSE '{' program '}'

    ELSE  shift, and go to state 210

    $default  reduce using rule 54 (if_statement)


state 200

   62 case_statement: CASE literal . ':' program BREAK ';'

    ':'  shift, and go to state 211


state 201

   63 default_statement: DEFAULT ':' . program BREAK ';'

    $default  reduce using rule 2 (program)

    program  go to state 212


state 202

   56 switch_statement: SWITCH '(' ID ')' '{' switch_program '}' .

    $default  reduce using rule 56 (switch_statement)


state 203

   60 case_statements: case_statements case_statement .

    $default  reduce using rule 60 (case_statements)


state 204

   58 switch_program: case_statements default_statement .

    $default  reduce using rule 58 (switch_program)


state 205

   23 do_loop: DO '{' program '}' WHILE '(' expression . ')'
   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    ')'  shift, and go to state 213


state 206

   33 while_loop: WHILE '(' expression ')' '{' program '}' .

    $default  reduce using rule 33 (while_loop)


state 207

   24 for_loop: FOR '(' for_loop_initialization ';' for_loop_condition ';' for_loop_increment . ')' '{' program '}'

    ')'  shift, and go to state 214


state 208

   31 for_loop_increment: assignment .

    $default  reduce using rule 31 (for_loop_increment)


state 209

   30 for_loop_increment: expression .
   99 condition: expression . OR expression
  100          | expression . AND expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98

    $default  reduce using rule 30 (for_loop_increment)


state 210

   55 if_statement: IF '(' expression ')' '{' program '}' ELSE . '{' program '}'

    '{'  shift, and go to state 215


state 211

   62 case_statement: CASE literal ':' . program BREAK ';'

    $default  reduce using rule 2 (program)

    program  go to state 216


state 212

    1 program: program . statement
   63 default_statement: DEFAULT ':' program . BREAK ';'

    BREAK   shift, and go to state 217
    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 213

   23 do_loop: DO '{' program '}' WHILE '(' expression ')' .

    $default  reduce using rule 23 (do_loop)


state 214

   24 for_loop: FOR '(' for_loop_initialization ';' for_loop_condition ';' for_loop_increment ')' . '{' program '}'

    '{'  shift, and go to state 218


state 215

   55 if_statement: IF '(' expression ')' '{' program '}' ELSE '{' . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 219


state 216

    1 program: program . statement
   62 case_statement: CASE literal ':' program . BREAK ';'

    BREAK   shift, and go to state 220
    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 217

   63 default_statement: DEFAULT ':' program BREAK . ';'

    ';'  shift, and go to state 221


state 218

   24 for_loop: FOR '(' for_loop_initialization ';' for_loop_condition ';' for_loop_increment ')' '{' . program '}'

    $default  reduce using rule 2 (program)

    program  go to state 222


state 219

    1 program: program . statement
   55 if_statement: IF '(' expression ')' '{' program '}' ELSE '{' program . '}'

    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11
    '}'     shift, and go to state 223

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 220

   62 case_statement: CASE literal ':' program BREAK . ';'

    ';'  shift, and go to state 224


state 221

   63 default_statement: DEFAULT ':' program BREAK ';' .

    $default  reduce using rule 63 (default_statement)


state 222

    1 program: program . statement
   24 for_loop: FOR '(' for_loop_initialization ';' for_loop_condition ';' for_loop_increment ')' '{' program . '}'

    RETURN  shift, and go to state 3
    CONST   shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    CHAR    shift, and go to state 7
    STRING  shift, and go to state 8
    BOOL    shift, and go to state 9
    VOID    shift, and go to state 10
    ID      shift, and go to state 11
    '}'     shift, and go to state 225

    WHILE     reduce using rule 13 ($@4)
    FOR       reduce using rule 15 ($@5)
    DO        reduce using rule 11 ($@3)
    SWITCH    reduce using rule 9 ($@2)
    '{'       reduce using rule 21 ($@6)
    $default  reduce using rule 7 ($@1)

    statement                       go to state 12
    $@1                             go to state 13
    $@2                             go to state 14
    $@3                             go to state 15
    $@4                             go to state 16
    $@5                             go to state 17
    $@6                             go to state 18
    function_definition             go to state 19
    function_declaration_prototype  go to state 20
    return_statement                go to state 21
    function_call                   go to state 22
    initialization                  go to state 23
    declaration                     go to state 24
    assignment                      go to state 25
    type                            go to state 26
    unary_expression                go to state 27


state 223

   55 if_statement: IF '(' expression ')' '{' program '}' ELSE '{' program '}' .

    $default  reduce using rule 55 (if_statement)


state 224

   62 case_statement: CASE literal ':' program BREAK ';' .

    $default  reduce using rule 62 (case_statement)


state 225

   24 for_loop: FOR '(' for_loop_initialization ';' for_loop_condition ';' for_loop_increment ')' '{' program '}' .

    $default  reduce using rule 24 (for_loop)
